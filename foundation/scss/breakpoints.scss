// Return the next breakpoint or null if is the last breakpoint
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @if not $n {
      @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // @include breakpoint-up(sm) {}
  @mixin breakpoint-up($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      @media (min-width: $breakpoint-value) {
        @content;
      }
    } @else {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }
  
  // @include breakpoint-down(sm) {}
  @mixin breakpoint-down($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      @media (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }
  
  // @include breakpoint-between(sm, md) {}
  @mixin breakpoint-between($lower, $upper) {
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
  
      $lower-breakpoint: map-get($breakpoints, $lower);
      $upper-breakpoint: map-get($breakpoints, $upper);
  
      @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
        @content;
      }
    } @else {
      @if  map-has-key($breakpoints, $lower) == false {
        @warn 'Your lower breakpoint was invalid: #{$lower}.';
      }
  
      @if  map-has-key($breakpoints, $upper) == false {
        @warn 'Your upper breakpoint was invalid: #{$upper}.';
      }
    }
  }
  
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  // @include breakpoint-only(sm) {}
  @mixin breakpoint-only($breakpoint, $breakpoints: $breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    /* stylelint-disable */
    $min:  breakpoint-min($breakpoint, $breakpoints);
    $next: breakpoint-next($breakpoint, $breakpoints);
    $max:  breakpoint-max($next, $breakpoints);
    /* stylelint-enable */
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include media-breakpoint-down($next, $breakpoints) {
        @content;
      }
    }
  }